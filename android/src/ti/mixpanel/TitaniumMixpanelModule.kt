/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package ti.mixpanel

import com.mixpanel.android.mpmetrics.MixpanelAPI
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.titanium.TiApplication
import org.json.JSONObject

@Kroll.module(name = "TitaniumMixpanel", id = "ti.mixpanel")
class TitaniumMixpanelModule: KrollModule() {

	// Properties

	private var mixpanelInstance: MixpanelAPI? = null

	// Methods

	@Kroll.method
	fun initialize(params: KrollDict) {
		val apiKey = params.getString("apiKey")
		val trackAutomaticEvents = params.optBoolean("trackAutomaticEvents", true)

		mixpanelInstance = MixpanelAPI.getInstance(TiApplication.getAppCurrentActivity(), apiKey, trackAutomaticEvents)
	}

	@Kroll.method
	fun logEvent(eventName: String, params: KrollDict?) {
		if (params != null) {
			mixpanelInstance?.track(eventName, JSONObject(params))
		} else {
			mixpanelInstance?.track(eventName)
		}
	}

	@Kroll.method
	@Kroll.setProperty
	fun setLoggingEnabled(loggingEnabled: Boolean) {
		mixpanelInstance?.setEnableLogging(loggingEnabled)
	}

	@Kroll.method
	@Kroll.setProperty
	fun setUserID(userID: String) {
		mixpanelInstance?.identify(userID)
	}

	@Kroll.method
	fun alias(args: Array<Any>) {
		if (args.size != 2) {
			throw IllegalArgumentException("alias requires exactly 2 arguments: [alias, distinctId]")
		}
		val alias = args[0] as String
		val distinctId = args[1] as String
		mixpanelInstance?.alias(alias, distinctId)
	}

	@Kroll.method
	fun identify(distinctId: String) {
		mixpanelInstance?.identify(distinctId)
	}

	@Kroll.method
	fun getDistinctID(): String {
		return mixpanelInstance?.distinctId ?: ""
	}

	@Kroll.method
	fun registerSuperProperties(props: KrollDict) {
		mixpanelInstance?.registerSuperProperties(JSONObject(props))
	}

	@Kroll.method
	fun reset() {
		mixpanelInstance?.reset()
	}

	@Kroll.method
	fun flush() {
		mixpanelInstance?.flush()
	}

	@Kroll.method
	fun optOutTracking() {
		mixpanelInstance?.optOutTracking()
	}

	@Kroll.method
	fun optInTracking() {
		mixpanelInstance?.optInTracking()
	}
}
